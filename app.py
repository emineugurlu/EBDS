# app.py - Streamlit UygulamasÄ± (GeliÅŸmiÅŸ)

import streamlit as st
from nlp_model import get_embedding
from web_scraper import search_and_scrape
from knowledge_base import KNOWLEDGE_BASE
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
import pickle
import os
import re

EMBEDDINGS_FILE = "embeddings.pkl"

@st.cache_resource
def load_resources():
    """NLP modelini ve bilgi bankasÄ± embedding'lerini yÃ¼kler veya oluÅŸturur."""
    st.spinner("NLP modelini yÃ¼klÃ¼yor ve bilgi bankasÄ± embedding'lerini hazÄ±rlÄ±yor...")
    if os.path.exists(EMBEDDINGS_FILE):
        st.info(f"'{EMBEDDINGS_FILE}' dosyasÄ±ndan bilgi bankasÄ± embedding'leri yÃ¼kleniyor...")
        with open(EMBEDDINGS_FILE, 'rb') as f:
            return pickle.load(f)
    else:
        st.info("Bilgi bankasÄ± embedding'leri oluÅŸturuluyor... Bu biraz zaman alabilir.")
        embeddings = {
            anahtar: get_embedding(anahtar) for anahtar in KNOWLEDGE_BASE.keys()
        }
        with open(EMBEDDINGS_FILE, 'wb') as f:
            pickle.dump(embeddings, f)
        st.success(f"Bilgi bankasÄ± embedding'leri '{EMBEDDINGS_FILE}' dosyasÄ±na kaydedildi.")
        return embeddings

# KaynaklarÄ± yÃ¼kle (Streamlit uygulamasÄ±nÄ±n baÅŸÄ±nda bir kez Ã§alÄ±ÅŸÄ±r)
# Bu kÄ±smÄ± Streamlit'in kendi lifecycle'Ä±na bÄ±rakÄ±yoruz, ilk yÃ¼klemede gÃ¶sterilecek.
bilgi_bankasi_embeddings = load_resources()

def preprocess_query(query):
    """KullanÄ±cÄ± sorgusunu temizler ve kÃ¼Ã§Ã¼k harfe dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r."""
    query = query.lower().strip()
    query = re.sub(r'[^\w\s]', '', query)
    query = re.sub(r'\s+', ' ', query).strip()
    return query

def get_assistant_response(soru):
    """
    NLP entegrasyonu ve Web Scraping ile daha akÄ±llÄ± bir temel bilim asistanÄ±.
    Streamlit uygulamasÄ± iÃ§in uyarlanmÄ±ÅŸtÄ±r.
    """
    islenmis_soru = preprocess_query(soru)
    soru_embedding = get_embedding(islenmis_soru)

    en_yuksek_benzerlik = -1
    en_benzer_anahtar = None

    for anahtar, embedding in bilgi_bankasi_embeddings.items():
        benzerlik = cosine_similarity(soru_embedding.reshape(1, -1), embedding.reshape(1, -1))[0][0]
        if benzerlik > en_yuksek_benzerlik:
            en_yuksek_benzerlik = benzerlik
            en_benzer_anahtar = anahtar

    if en_yuksek_benzerlik > 0.65: # EÅŸik deÄŸeri
        return f"EBDS AsistanÄ±: {KNOWLEDGE_BASE[en_benzer_anahtar]}"
    else:
        with st.spinner("Bilgi bankasÄ±nda bulunamadÄ±. Web'de aranÄ±yor..."):
            web_sonuc = search_and_scrape(soru) # Web scraping iÃ§in orijinal soruyu kullan

        if web_sonuc and not ("Web'den Ã§ekilen metin anlamlÄ± deÄŸil veya Ã§ok kÄ±sa." in web_sonuc or \
                              "DuckDuckGo aramasÄ±nda uygun bir baÄŸlantÄ± bulunamadÄ±." in web_sonuc or \
                              "Web isteÄŸi hatasÄ±" in web_sonuc or \
                              "Web sayfasÄ±nÄ± iÅŸlerken bir sorun oluÅŸtu" in web_sonuc):
            return f"EBDS AsistanÄ± (Web'den): {web_sonuc}"
        else:
            # Hata mesajlarÄ±nÄ± daha anlaÅŸÄ±lÄ±r hale getir
            error_message = "ÃœzgÃ¼nÃ¼m, bu konu hakkÄ±nda henÃ¼z bilgiye sahip deÄŸilim veya yeterince ilgili bir bilgi bulamadÄ±m."
            if "Web'den Ã§ekilen metin anlamlÄ± deÄŸil veya Ã§ok kÄ±sa." in web_sonuc:
                error_message += " (Web sayfasÄ±ndan yeterli bilgi alÄ±namadÄ±.)"
            elif "DuckDuckGo aramasÄ±nda uygun bir baÄŸlantÄ± bulunamadÄ±." in web_sonuc:
                error_message += " (Web aramasÄ±nda uygun bir kaynak bulunamadÄ±.)"
            elif "Web isteÄŸi hatasÄ±" in web_sonuc:
                error_message += " (Ä°nternet baÄŸlantÄ±nÄ±zda veya eriÅŸimde bir sorun oluÅŸtu.)"
            elif "Web sayfasÄ±nÄ± iÅŸlerken bir sorun oluÅŸtu" in web_sonuc:
                error_message += " (Web sayfasÄ±nÄ± iÅŸlerken teknik bir sorun yaÅŸandÄ±.)"
            return f"EBDS AsistanÄ±: {error_message}"


# --- Streamlit ArayÃ¼zÃ¼ ---
st.set_page_config(page_title="EBDS Temel Bilim AsistanÄ±", page_icon=":brain:", layout="wide")

st.title("ğŸ”¬ EBDS Temel Bilim AsistanÄ±")
st.markdown("Temel bilimler alanÄ±ndaki sorularÄ±nÄ±za yanÄ±t bulmak iÃ§in buradayÄ±m!")

# Sohbet geÃ§miÅŸini baÅŸlat (Streamlit session_state)
if "messages" not in st.session_state:
    st.session_state.messages = []

# Sohbet geÃ§miÅŸini gÃ¶rÃ¼ntÃ¼le
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# KullanÄ±cÄ±dan soru alma
if kullanici_sorusu := st.chat_input("Sorunuzu buraya yazÄ±n..."):
    # KullanÄ±cÄ± mesajÄ±nÄ± geÃ§miÅŸe ekle ve gÃ¶ster
    st.session_state.messages.append({"role": "user", "content": kullanici_sorusu})
    with st.chat_message("user"):
        st.markdown(kullanici_sorusu)

    # Asistan yanÄ±tÄ±nÄ± al ve gÃ¶ster
    with st.chat_message("assistant"):
        with st.spinner("YanÄ±t aranÄ±yor..."):
            response = get_assistant_response(kullanici_sorusu)
            st.markdown(response)
        st.session_state.messages.append({"role": "assistant", "content": response})

st.markdown("---")
st.markdown("Bu asistan, 'insanlÄ±k iÃ§in bÃ¼yÃ¼k bir proje' vizyonuyla geliÅŸtirilmiÅŸtir.")